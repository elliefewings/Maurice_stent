test <- cellphonedb(pval=pvals, smeans=smeans, metadata=meta)
test$network
runApp('C:/Users/ellie/OneDrive/Saez/Pipeline/github/cellphonedb_shiny')
sr <- arrangeGrob(test$plot.senders, test$plot.recievers, ncol=2)
grid.arrange(arrangeGrob(test$plot.senders, test$plot.recievers, ncol=2))
sr <- grid.arrange(arrangeGrob(test$plot.senders, test$plot.recievers, ncol=2))
print(sr)
runApp('C:/Users/ellie/OneDrive/Saez/Pipeline/github/cellphonedb_shiny')
cp.out <- cellphonedb(pval=pvals, smeans=smeans, metadata=meta)
sender <- cp.out$plot.senders
sender
reciever <- cp.out$plot.recievers
network <- cp.out$network
sankey <- cp.out$sankey
sankey
reciever
grid.arrange(sender, reciever)
grid.arrange(sender, reciever, ncols=2)
grid.arrange(sender, reciever, nrow=1)
runApp('C:/Users/ellie/OneDrive/Saez/Pipeline/github/cellphonedb_shiny')
runApp('C:/Users/ellie/OneDrive/Saez/Pipeline/github/cellphonedb_shiny')
runApp('C:/Users/ellie/OneDrive/Saez/Pipeline/github/cellphonedb_shiny')
shiny::runApp('C:/Users/ellie/OneDrive/Saez/Pipeline/github/cellphonedb_shiny')
runApp('C:/Users/ellie/OneDrive/Saez/Pipeline/github/cellphonedb_shiny')
source('C:/Users/ellie/OneDrive/Saez/Pipeline/github/cellphonedb_shiny/source.R')
source('C:/Users/ellie/OneDrive/Saez/Pipeline/github/cellphonedb_shiny/source.R')
runApp('C:/Users/ellie/OneDrive/Saez/Pipeline/github/cellphonedb_shiny')
source('C:/Users/ellie/OneDrive/Saez/Pipeline/github/cellphonedb_shiny/source.R')
runApp('C:/Users/ellie/OneDrive/Saez/Pipeline/github/cellphonedb_shiny')
runApp('C:/Users/ellie/OneDrive/Saez/Pipeline/github/cellphonedb_shiny')
runApp('C:/Users/ellie/OneDrive/Saez/Pipeline/github/cellphonedb_shiny')
source('C:/Users/ellie/OneDrive/Saez/Pipeline/github/cellphonedb_shiny/source.R')
runApp('C:/Users/ellie/OneDrive/Saez/Pipeline/github/cellphonedb_shiny')
runApp('C:/Users/ellie/OneDrive/Saez/Pipeline/github/cellphonedb_shiny')
runApp('C:/Users/ellie/OneDrive/Saez/Pipeline/github/cellphonedb_shiny')
runApp('C:/Users/ellie/OneDrive/Saez/Pipeline/github/dataplotting_shiny')
runApp('C:/Users/ellie/OneDrive/Saez/Pipeline/github/cellphonedb_shiny')
pval.file <- "~/Saez/Maurice_stent_analysis/scripts/cellphonedb/case_out/pvalues.txt"
smeans.file <- "~/Saez/Maurice_stent_analysis/scripts/cellphonedb/case_out/significant_means.txt"
metadata.file <- "~/Saez/Maurice_stent_analysis/scripts/cellphonedb/case_out/metadata.case.txt"
source('C:/Users/ellie/OneDrive/Saez/Pipeline/github/cellphonedb_shiny/source.R')
cp.out <- cellphonedb(pval=pval.file, smeans=smeans.file, metadata=metadata.file)
sr <- grid.arrange(cp.out$plot.senders, cp.out$plot.recievers, nrow=1,
top = textGrob("Number of interactions from senders and recievers",gp=gpar(fontsize=20)))
network <- cp.out$network +
ggtitle("Network of interacting celltypes") +
theme(plot.title = element_text(size = 20))
sankey <- cp.out$sankey
print(sankey)
print(network)
print(sr)
grid.arrange(cp.out$plot.senders, cp.out$plot.recievers, nrow=1,
top = textGrob("Number of interactions from senders and recievers",gp=gpar(fontsize=20)))
cp.out$plot.senders,
cp.out$plot.senders
print(cp.out$plot.senders)
runApp('C:/Users/ellie/OneDrive/Saez/Pipeline/github/cellphonedb_shiny')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("progeny")
libs <- c("optparse", "progeny")
for (i in libs) {
if (! suppressPackageStartupMessages(suppressWarnings(require(i, character.only = TRUE, quietly = TRUE)))) {
install.packages(i, repos = "https://ftp.fau.de/cran/")
if (! suppressPackageStartupMessages(suppressWarnings(require(i, character.only = TRUE, quietly = TRUE)))) {
stop(paste("Unable to install package: ", i, ". Please install manually and restart.", sep=""))
}
}
}
option_list <- list(
make_option(c("--expr", "-e"), action="store", default=NULL, type='character',
help="A gene expression object with HGNC/MGI symbols in rows and samples in columns.
In order to run PROGENy in single-cell RNAseq data, it also accepts Seurat and SingleCellExperiment object,
taking the normalized counts for the computation. [required]"),
make_option(c("--scale", "-s"), action="store", default=FALSE, type='logical',
help="A logical value indicating whether to scale the scores of each pathway to have a mean of zero and a
standard deviation of one. It does not apply if we use permutations [default=FALSE]")
make_option(c("--organism", "-o"), action="store", default="Mouse", type='character',
help="The model organism - 'Human' or 'Mouse' [default=Mouse]")
make_option(c("--top", "-t"), action="store", default=500, type='numeric',
help="The top n genes for generating the model matrix according to significance (p-value) [default=500]")
make_option(c("--perm", "-p"), action="store", default=1, type='numeric',
help="An interger detailing the number of permutations.
When Permutations larger than 1, we compute progeny pathway scores and assesses their significance using a
gene sampling-based permutation strategy, for a series of experimental samples/contrasts [default=1]")
make_option(c("--verbose", "-v"), action="store", default=FALSE, type='logical',
help="A logical value indicating whether to display a message about the number of genes used per pathway
to compute progeny scores (i.e. number of genes present in the progeny model and in the expression dataset) [default=FALSE]")
make_option(c("--z_scores", "-z"), action="store", default=FALSE, type='logical',
help="Only applies if the number of permutations is greater than 1. A logical value. TRUE: the z-scores will
be returned for the pathway activity estimations. FALSE: the function returns a normalized z-score value between -1 and 1 [default=FALSE]")
make_option(c("--get_nulldist", "-g"), action="store", default=FALSE, type='logical',
help="Only applies if the number of permutations is greater than 1. A logical value. TRUE: the null distributions generated
to assess the signifance of the pathways scores is also returned [default=FALSE]")
)
opt <- parse_args(OptionParser(option_list=option_list))
## Check for input and output options
if (is.null(opt$expr)) {
message("ERROR: Expression matrix missing, please specify with --expr, -e flags.")
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
}
option_list <- list(
make_option(c("--expr", "-e"), action="store", default=NULL, type='character',
help="A gene expression object with HGNC/MGI symbols in rows and samples in columns.
In order to run PROGENy in single-cell RNAseq data, it also accepts Seurat and SingleCellExperiment object,
taking the normalized counts for the computation. [required]"),
make_option(c("--scale", "-s"), action="store", default=FALSE, type='logical',
help="A logical value indicating whether to scale the scores of each pathway to have a mean of zero and a
standard deviation of one. It does not apply if we use permutations [default=FALSE]"),
make_option(c("--organism", "-o"), action="store", default="Mouse", type='character',
help="The model organism - 'Human' or 'Mouse' [default=Mouse]"),
make_option(c("--top", "-t"), action="store", default=500, type='numeric',
help="The top n genes for generating the model matrix according to significance (p-value) [default=500]"),
make_option(c("--perm", "-p"), action="store", default=1, type='numeric',
help="An interger detailing the number of permutations.
When Permutations larger than 1, we compute progeny pathway scores and assesses their significance using a
gene sampling-based permutation strategy, for a series of experimental samples/contrasts [default=1]"),
make_option(c("--verbose", "-v"), action="store", default=FALSE, type='logical',
help="A logical value indicating whether to display a message about the number of genes used per pathway
to compute progeny scores (i.e. number of genes present in the progeny model and in the expression dataset) [default=FALSE]"),
make_option(c("--z_scores", "-z"), action="store", default=FALSE, type='logical',
help="Only applies if the number of permutations is greater than 1. A logical value. TRUE: the z-scores will
be returned for the pathway activity estimations. FALSE: the function returns a normalized z-score value between -1 and 1 [default=FALSE]"),
make_option(c("--get_nulldist", "-g"), action="store", default=FALSE, type='logical',
help="Only applies if the number of permutations is greater than 1. A logical value. TRUE: the null distributions generated
to assess the signifance of the pathways scores is also returned [default=FALSE]")
)
opt <- parse_args(OptionParser(option_list=option_list))
load("C:/Users/ellie/OneDrive/Saez/Pipeline/github/data/ERS2921927_20200806/pipeline_output/s01_qc_processing.Rdata")
data@assays
data@assays$RNA
opt$expr <- data@assays$RNA
opt$expr <- data@assays$RNA %>% as.matrix()
opt$expr <- as.matrix(data@assays$RNA)
out <- progeny(opt$expr,
scale=opt$scale,
organism=opt$organism,
top=opt$top,
perm=opt$perm,
verbose=opt$verbose,
z_scores=opt$z_scores,
get_nulldist=opt$get_nulldist)
opt$expr <- as.matrix(pbmc@assays[["RNA"]]@counts)
opt$expr <- as.matrix(data@assays[["RNA"]]@counts)
out <- progeny(opt$expr,
scale=opt$scale,
organism=opt$organism,
top=opt$top,
perm=opt$perm,
verbose=opt$verbose,
z_scores=opt$z_scores,
get_nulldist=opt$get_nulldist)
opt$scale
option_list <- list(
make_option(c("--expr", "-e"), action="store", default=NULL, type='character',
help="A gene expression object with HGNC/MGI symbols in rows and samples in columns.
In order to run PROGENy in single-cell RNAseq data, it also accepts Seurat and SingleCellExperiment object,
taking the normalized counts for the computation. [required]"),
make_option(c("--scale", "-s"), action="store", default=FALSE, type='logical',
help="A logical value indicating whether to scale the scores of each pathway to have a mean of zero and a
standard deviation of one. It does not apply if we use permutations [default=FALSE]"),
make_option(c("--organism", "-o"), action="store", default="Mouse", type='character',
help="The model organism - 'Human' or 'Mouse' [default=Mouse]"),
make_option(c("--top", "-t"), action="store", default=500, type='numeric',
help="The top n genes for generating the model matrix according to significance (p-value) [default=500]"),
make_option(c("--perm", "-p"), action="store", default=1, type='numeric',
help="An interger detailing the number of permutations.
When Permutations larger than 1, we compute progeny pathway scores and assesses their significance using a
gene sampling-based permutation strategy, for a series of experimental samples/contrasts [default=1]"),
make_option(c("--verbose", "-v"), action="store", default=FALSE, type='logical',
help="A logical value indicating whether to display a message about the number of genes used per pathway
to compute progeny scores (i.e. number of genes present in the progeny model and in the expression dataset) [default=FALSE]"),
make_option(c("--z_scores", "-z"), action="store", default=FALSE, type='logical',
help="Only applies if the number of permutations is greater than 1. A logical value. TRUE: the z-scores will
be returned for the pathway activity estimations. FALSE: the function returns a normalized z-score value between -1 and 1 [default=FALSE]"),
make_option(c("--get_nulldist", "-g"), action="store", default=FALSE, type='logical',
help="Only applies if the number of permutations is greater than 1. A logical value. TRUE: the null distributions generated
to assess the signifance of the pathways scores is also returned [default=FALSE]")
)
opt <- parse_args(OptionParser(option_list=option_list))
opt$expr <- as.matrix(data@assays[["RNA"]]@counts)
out <- progeny(opt$expr,
scale=opt$scale,
organism=opt$organism,
top=opt$top,
perm=opt$perm,
verbose=opt$verbose,
z_scores=opt$z_scores,
get_nulldist=opt$get_nulldist)
print(out)
libs <- c("optparse", "progeny")
require("progeny", character.only = TRUE, quietly = TRUE)
!require("progeny", character.only = TRUE, quietly = TRUE)
!requireNamespace("BiocManager", quietly = TRUE
)
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
if (require("progeny", character.only = TRUE, quietly = TRUE)){
BiocManager::install("progeny")
}
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
if (!require("progeny", character.only = TRUE, quietly = TRUE)){
BiocManager::install("progeny")
}
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
if (!require("dorothea", character.only = TRUE, quietly = TRUE)){
BiocManager::install("dorothea")
}
# Load libraries
libs <- c("optparse", "dorothea")
for (i in libs) {
if (! suppressPackageStartupMessages(suppressWarnings(require(i, character.only = TRUE, quietly = TRUE)))) {
install.packages(i, repos = "https://ftp.fau.de/cran/")
if (! suppressPackageStartupMessages(suppressWarnings(require(i, character.only = TRUE, quietly = TRUE)))) {
stop(paste("Unable to install package: ", i, ". Please install manually and restart.", sep=""))
}
}
}
## Get options
option_list <- list(
make_option(c("--expr", "-e"), action="store", default=NULL, type='character',
help="An object containing a gene expression matrix with genes (HGNC/MGI symbols) in rows and samples in columns [required]"),
make_option(c("--organism", "-o"), action="store", default="Mouse", type='character',
help="The model organism - 'Human' or 'Mouse' [default=Mouse]"),
make_option(c("--tidy", "-t"), action="store", default=FALSE, type='logical',
help="Logical, whether computed tf activities scores should be returned in a tidy format [default=FALSE]"),
make_option(c("--pleiotropy", "-p"), action="store", default=FALSE, type='logical',
help="Logical, whether correction for pleiotropic regulation should be performed [default=FALSE]"),
make_option(c("--nes", "-n"), action="store", default=FALSE, type='logical',
help="Logical, whether the enrichment score reported should be normalized [default=FALSE]"),
make_option(c("--method", "-m"), action="store", default="none", type='character',
help="Character string indicating the method for computing the single samples signature, either scale, rank, mad, ttest or none [default=none]"),
make_option(c("--bootstraps", "-b"), action="store", default=1, type='numeric',
help="Integer indicating the number of bootstraps iterations to perform. Only the scale method is implemented with bootstraps [default=1]"),
make_option(c("--minsize", "-i"), action="store", default=1, type='numeric',
help="Integer indicating the minimum number of targets allowed per regulon [default=1]"),
make_option(c("--adaptive.size", "-a"), action="store", default=FALSE, type='logical',
help="Logical, whether the weighting scores should be taken into account for computing the regulon size [default=FALSE]"),
make_option(c("--eset.filter", "-f"), action="store", default=FALSE, type='logical',
help="Logical, whether the dataset should be limited only to the genes represented in the interactome
#' @param mvws Number or vector indicating either the exponent score for the metaViper weights, or the
#' inflection point and trend for the sigmoid function describing the weights in metaViper [default=FALSE]"),
make_option(c("--cores", "-c"), action="store", default=1, type='numeric',
help="Integer indicating the number of cores to use (only 1 in Windows-based systems) [default=1]"),
make_option(c("--verbose", "-v"), action="store", default=FALSE, type='logical',
help="A logical value indicating whether to display a message about the number of genes used per pathway
to compute progeny scores (i.e. number of genes present in the progeny model and in the expression dataset) [default=FALSE]")
)
opt <- parse_args(OptionParser(option_list=option_list))
opt$expr <- as.matrix(data@assays[["RNA"]]@counts)
load("C:/Users/ellie/OneDrive/Saez/Pipeline/github/data/ERS2921927_20200806/pipeline_output/s01_qc_processing.Rdata")
option_list <- list(
make_option(c("--expr", "-e"), action="store", default=NULL, type='character',
help="An object containing a gene expression matrix with genes (HGNC/MGI symbols) in rows and samples in columns [required]"),
make_option(c("--organism", "-o"), action="store", default="Mouse", type='character',
help="The model organism - 'Human' or 'Mouse' [default=Mouse]"),
make_option(c("--tidy", "-t"), action="store", default=FALSE, type='logical',
help="Logical, whether computed tf activities scores should be returned in a tidy format [default=FALSE]"),
make_option(c("--pleiotropy", "-p"), action="store", default=FALSE, type='logical',
help="Logical, whether correction for pleiotropic regulation should be performed [default=FALSE]"),
make_option(c("--nes", "-n"), action="store", default=FALSE, type='logical',
help="Logical, whether the enrichment score reported should be normalized [default=FALSE]"),
make_option(c("--method", "-m"), action="store", default="none", type='character',
help="Character string indicating the method for computing the single samples signature, either scale, rank, mad, ttest or none [default=none]"),
make_option(c("--bootstraps", "-b"), action="store", default=1, type='numeric',
help="Integer indicating the number of bootstraps iterations to perform. Only the scale method is implemented with bootstraps [default=1]"),
make_option(c("--minsize", "-i"), action="store", default=1, type='numeric',
help="Integer indicating the minimum number of targets allowed per regulon [default=1]"),
make_option(c("--adaptive.size", "-a"), action="store", default=FALSE, type='logical',
help="Logical, whether the weighting scores should be taken into account for computing the regulon size [default=FALSE]"),
make_option(c("--eset.filter", "-f"), action="store", default=FALSE, type='logical',
help="Logical, whether the dataset should be limited only to the genes represented in the interactome
#' @param mvws Number or vector indicating either the exponent score for the metaViper weights, or the
#' inflection point and trend for the sigmoid function describing the weights in metaViper [default=FALSE]"),
make_option(c("--cores", "-c"), action="store", default=1, type='numeric',
help="Integer indicating the number of cores to use (only 1 in Windows-based systems) [default=1]"),
make_option(c("--verbose", "-v"), action="store", default=FALSE, type='logical',
help="A logical value indicating whether to display a message about the number of genes used per pathway
to compute progeny scores (i.e. number of genes present in the progeny model and in the expression dataset) [default=FALSE]")
)
opt <- parse_args(OptionParser(option_list=option_list))
opt$expr <- as.matrix(data@assays[["RNA"]]@counts)
if (is.null(opt$expr)) {
message("ERROR: Expression matrix missing, please specify with --expr, -e flags.")
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
}
org <- ifelse(opt$organism == "Human", "dorothea_hs", "dorothea_mm")
dorothea_regulon_human <- get(data(org, package = "dorothea"))
dorothea_regulon_human <- get(data(get(org), package = "dorothea"))
get(org)
dorothea_regulon_human <- get(data(org, package = "dorothea"))
dorothea_regulon_human <- get(data(list=org, package = "dorothea"))
regulon <- dorothea_regulon_human %>%
dplyr::filter(confidence %in% c("A","B","C"))
out <- run_viper(opt$expr, regulon,
options = list(pleiotropy = opt$pleiotropy,
nes = opt$nes,
method = opt$method,
bootstraps = opt$bootstraps,
minsize = opt$minsize,
adaptive.size = opt$adaptive.size,
eset.filter = opt$eset.filter,
cores = opt$cores,
verbose = opt$verbose))
print(out)
out <- run_viper(opt$expr, regulon)
out <- run_viper(opt$expr, regulon, options=list(pleiotropy = opt$pleiotropy,))
out <- run_viper(opt$expr, regulon, options=list(pleiotropy = opt$pleiotropy))
out <- run_viper(opt$expr, regulon, options=list(pleiotropy = opt$pleiotropy, nes = opt$nes,))
out <- run_viper(opt$expr, regulon, options=list(pleiotropy = opt$pleiotropy, nes = opt$nes))
out <- run_viper(opt$expr, regulon, options=list(pleiotropy = opt$pleiotropy, nes = opt$nes, method = opt$method))
out <- run_viper(opt$expr, regulon, options=list(pleiotropy = opt$pleiotropy, nes = opt$nes, method = opt$method, bootstraps = opt$bootstraps))
out <- run_viper(opt$expr, regulon,
options = list(pleiotropy = opt$pleiotropy,
nes = opt$nes,
method = opt$method,
minsize = opt$minsize,
adaptive.size = opt$adaptive.size,
eset.filter = opt$eset.filter,
cores = opt$cores,
verbose = opt$verbose))
print(out)
libs <- c("optparse", "dorothea", "viper", "dplyr", "magrittr")
for (i in libs) {
if (! suppressPackageStartupMessages(suppressWarnings(require(i, character.only = TRUE, quietly = TRUE)))) {
install.packages(i, repos = "https://ftp.fau.de/cran/")
if (! suppressPackageStartupMessages(suppressWarnings(require(i, character.only = TRUE, quietly = TRUE)))) {
stop(paste("Unable to install package: ", i, ". Please install manually and restart.", sep=""))
}
}
}
library(webshot)
webshot(url="C:/Users/ellie/OneDrive/Saez/Pipeline/github/data/ERS2921927_20200806/web_summary.html")
webshot(url="C:/Users/ellie/OneDrive/Saez/Pipeline/github/data/ERS2921927_20200806/web_summary.html", "web_summary.pdf")
load("C:/Users/ellie/OneDrive/Saez/Pipeline/github/data/ERS2921927_20200806/pipeline_output/s01_qc_processing.Rdata")
mtx <- data@assays$RNA
mtx <- data@assays
mtx <- data
data
data@assays
data@assays$RNA
data@assays$RNA %>% as.matrix()
as.matrix(data@assays$RNA)
load("C:/Users/ellie/OneDrive/Saez/Pipeline/github/data/ERS2921927_20200806/pipeline_output/s01_qc_processing.Rdata")
library(Seurat)
input <- as.matrix(GetAssayData(pbmc, slot = "counts")
)
input <- as.matrix(GetAssayData(data, slot = "counts")
)
View(input)
write.table(input, "C:/Users/ellie/OneDrive/Saez/Pipeline/github/command_line_wrappers/test.mtx", quote = FALSE)
library(pheatmap)
source('C:/Users/ellie/OneDrive/Saez/Pipeline/github/monacle3_shiny/source.R')
test <- mon.run(data, gene, "cc")
data <- FindNeighbors(data, reduction = 'pca', dims = 1:30, k.param = 60)
data <- FindClusters(data, resolution = res, verbose = FALSE)
res <- 0.8
data <- FindClusters(data, resolution = res, verbose = FALSE)
data <- RunUMAP(data, dims = 1:30, n.neighbors = 60)
dim <- DimPlot(data, reduction = "umap", label = TRUE)
cds <- suppressWarnings(as.cell_data_set(data))
cds <- cluster_cells(cds, cluster_methods = 'leiden', reduction_method = 'UMAP')
sc.sub <- subset(as.Seurat(cds), monocle3_partitions == 1)
cds <- as.cell_data_set(sc.sub)
cds <- learn_graph(cds)
max.progenitor <- which.max(unlist(FetchData(sc.sub, gene)))
max.progenitor <- colnames(sc.sub)[max.progenitor]
cds <- order_cells(cds, root_cells = max.progenitor)
sc.sub <- as.Seurat(cds, assay = 'integrated')
data$monocle3_clusters = sc.sub$monocle3_clusters
data$monocle3_partitions = sc.sub$monocle3_partitions
data$monocle3_pseudotime = sc.sub$monocle3_pseudotime
p1 <- plot_cells(cds, label_groups_by_cluster = FALSE, label_leaves = FALSE, label_branch_points = FALSE)
p2 <- plot_cells(cds, color_cells_by = 'pseudotime', label_cell_groups = FALSE, label_leaves = FALSE, label_branch_points = FALSE)
p3 <- plot_cells(cds, color_cells_by = 'pseudotime', label_cell_groups = FALSE, label_leaves = FALSE, label_branch_points = FALSE, show_trajectory_graph = FALSE)
p4 <- FeaturePlot(sc.sub, feature = 'monocle3_pseudotime')
# Find differentially expressed genes
cds <-  estimate_size_factors(cds)
cds@rowRanges@elementMetadata@listData[['gene_short_name']] <- rownames(data[['integrated']])
cds_dif_test <- graph_test(cds, neighbor_graph = 'principal_graph', cores = 4)
cds_dif_test <-  cds_dif_test[cds_dif_test$q_value < 0.05,]
gene.list <-  cds_dif_test %>% arrange(desc(morans_test_statistic), desc(-q_value)) %>% rownames()
top.genes <- gene.list[1:40]
top <- cds_dif_test[rownames(cds_dif_test) %in% top.genes,]
summ <- AverageExpression(data, assays = "RNA", features = top.genes) %>% as.data.frame()
summ$all <- rowMeans(summ)
top.genes <- row.names(summ)[summ$all > 0]
kk <- Mclust(-data$monocle3_pseudotime, 5, modelNames = 'E')
p5 <- plotMarkerHeat(data@assays$RNA@data[,order(data$monocle3_pseudotime, decreasing = FALSE)],
kk$classification[order(data$monocle3_pseudotime, decreasing = TRUE)],
top.genes, averageCells = 10^1, clusterGenesK = 5, clusterGenes = TRUE,
gap = FALSE, outs = TRUE, plotheat = TRUE, fontsize = 20)
out <- list(p1=p1, p2=p2, p3=p3, p4=p4, p5=p5)
mon.run <- function(data, gene, id) {
# Set identity
Idents(data) <- id
# Set resolution
res <- 0.8
# Cluster
data <- FindNeighbors(data, reduction = 'pca', dims = 1:30, k.param = 60)
data <- FindClusters(data, resolution = res, verbose = FALSE)
data <- RunUMAP(data, dims = 1:30, n.neighbors = 60)
# Create dimension plot
dim <- DimPlot(data, reduction = "umap", label = TRUE)
# Create cell set for clustering
cds <- suppressWarnings(as.cell_data_set(data))
# Cluster cells with Leiden clustering
cds <- cluster_cells(cds, cluster_methods = 'leiden', reduction_method = 'UMAP')
sc.sub <- subset(as.Seurat(cds), monocle3_partitions == 1)
cds <- as.cell_data_set(sc.sub)
# Trajectory analysis
cds <- learn_graph(cds)
# Set progenitor
max.progenitor <- which.max(unlist(FetchData(sc.sub, gene)))
max.progenitor <- colnames(sc.sub)[max.progenitor]
cds <- order_cells(cds, root_cells = max.progenitor)
# Convert back to Seurat assayy
sc.sub <- as.Seurat(cds, assay = 'integrated')
# Add pseudotimes back to seurat object
data$monocle3_clusters = sc.sub$monocle3_clusters
data$monocle3_partitions = sc.sub$monocle3_partitions
data$monocle3_pseudotime = sc.sub$monocle3_pseudotime
# Create plots
p1 <- plot_cells(cds, label_groups_by_cluster = FALSE, label_leaves = FALSE, label_branch_points = FALSE)
p2 <- plot_cells(cds, color_cells_by = 'pseudotime', label_cell_groups = FALSE, label_leaves = FALSE, label_branch_points = FALSE)
p3 <- plot_cells(cds, color_cells_by = 'pseudotime', label_cell_groups = FALSE, label_leaves = FALSE, label_branch_points = FALSE, show_trajectory_graph = FALSE)
p4 <- FeaturePlot(sc.sub, feature = 'monocle3_pseudotime')
# Find differentially expressed genes
cds <-  estimate_size_factors(cds)
# Set gene names
cds@rowRanges@elementMetadata@listData[['gene_short_name']] <- rownames(data[['integrated']])
# Create table of DE genes
cds_dif_test <- graph_test(cds, neighbor_graph = 'principal_graph', cores = 4)
cds_dif_test <-  cds_dif_test[cds_dif_test$q_value < 0.05,]
# Get top genes
gene.list <-  cds_dif_test %>% arrange(desc(morans_test_statistic), desc(-q_value)) %>% rownames()
top.genes <- gene.list[1:40]
# Select top genes
top <- cds_dif_test[rownames(cds_dif_test) %in% top.genes,]
# Count mean expression of top genes
summ <- AverageExpression(data, assays = "RNA", features = top.genes) %>% as.data.frame()
summ$all <- rowMeans(summ)
# Edit top genes to remove those with 0 expression
top.genes <- row.names(summ)[summ$all > 0]
# Cluster cells (based on pseudotime) for heatmap
kk <- Mclust(-data$monocle3_pseudotime, 5, modelNames = 'E')
# Cluster genes with k-means clustering
p5 <- plotMarkerHeat(data@assays$RNA@data[,order(data$monocle3_pseudotime, decreasing = FALSE)],
kk$classification[order(data$monocle3_pseudotime, decreasing = TRUE)],
top.genes, averageCells = 10^1, clusterGenesK = 5, clusterGenes = TRUE,
gap = FALSE, outs = TRUE, plotheat = TRUE, fontsize = 20)
# Create output list
out <- list(p1=p1, p2=p2, p3=p3, p4=p4, p5=p5)
return(out)
}
setwd("C:/Users/ellie/OneDrive/Saez/Maurice_stent_analysis/pseudotime")
data  <- readRDS("cluster3integrated.rds")
id <- "cc"
gene <- "Col4a2"
Idents(data) <- id
res <- 0.8
# Cluster
data <- FindNeighbors(data, reduction = 'pca', dims = 1:30, k.param = 60)
data <- FindClusters(data, resolution = res, verbose = FALSE)
data <- RunUMAP(data, dims = 1:30, n.neighbors = 60)
# Create dimension plot
dim <- DimPlot(data, reduction = "umap", label = TRUE)
# Create cell set for clustering
cds <- suppressWarnings(as.cell_data_set(data))
# Cluster cells with Leiden clustering
cds <- cluster_cells(cds, cluster_methods = 'leiden', reduction_method = 'UMAP')
sc.sub <- subset(as.Seurat(cds), monocle3_partitions == 1)
cds <- as.cell_data_set(sc.sub)
# Trajectory analysis
cds <- learn_graph(cds)
source('C:/Users/ellie/OneDrive/Saez/Pipeline/github/monacle3_shiny/source.R')
mon.run(data, gene, id)
Idents(data) <- id
# Set resolution
res <- 0.8
# Cluster
data <- FindNeighbors(data, reduction = 'pca', dims = 1:30, k.param = 60)
data <- FindClusters(data, resolution = res, verbose = FALSE)
data <- RunUMAP(data, dims = 1:30, n.neighbors = 60)
# Create dimension plot
dim <- DimPlot(data, reduction = "umap", label = TRUE)
# Create cell set for clustering
cds <- suppressWarnings(as.cell_data_set(data))
# Cluster cells with Leiden clustering
cds <- cluster_cells(cds, cluster_methods = 'leiden', reduction_method = 'UMAP')
sc.sub <- subset(as.Seurat(cds), monocle3_partitions == 1)
cds <- as.cell_data_set(sc.sub)
# Trajectory analysis
cds <- learn_graph(cds)
# Set progenitor
max.progenitor <- which.max(unlist(FetchData(sc.sub, gene)))
max.progenitor <- colnames(sc.sub)[max.progenitor]
cds <- order_cells(cds, root_cells = max.progenitor)
# Convert back to Seurat assayy
sc.sub <- as.Seurat(cds, assay = 'integrated')
data$monocle3_clusters = sc.sub$monocle3_clusters
data$monocle3_partitions = sc.sub$monocle3_partitions
data$monocle3_pseudotime = sc.sub$monocle3_pseudotime
p1 <- plot_cells(cds, label_groups_by_cluster = FALSE, label_leaves = FALSE, label_branch_points = FALSE)
p2 <- plot_cells(cds, color_cells_by = 'pseudotime', label_cell_groups = FALSE, label_leaves = FALSE, label_branch_points = FALSE)
p3 <- plot_cells(cds, color_cells_by = 'pseudotime', label_cell_groups = FALSE, label_leaves = FALSE, label_branch_points = FALSE, show_trajectory_graph = FALSE)
p4 <- FeaturePlot(sc.sub, feature = 'monocle3_pseudotime')
